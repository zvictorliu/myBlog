<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>进程 on Operating System</title>
    <link>https://zvictorliu.github.io/operating_system/chapter02/</link>
    <description>Recent content in 进程 on Operating System</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://zvictorliu.github.io/operating_system/chapter02/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>进程概念</title>
      <link>https://zvictorliu.github.io/operating_system/chapter02/process_concept/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/operating_system/chapter02/process_concept/</guid>
      <description>进程概念#1.1 进程的状态#进程具有多种运行状态
最基本的：
运行态：正在处理机上运行，是真正的运行，进程本身就是动态的也可以理解为”运行“，此处可以理解为CPU正在处理 就绪态：即将送入处理机运行，其它都已准备好，多个进程会排成就绪队列 阻塞态：进程等待某一事件（不包括等待处理机，那是就绪态） 另外还有细分的两种状态：
创建态：进程正在被创建，这个过程是多个步骤的显得比较漫长，所以有这个状态，即准备中 结束态：正在从系统中消失 1.2 进程的表示#一定要注意 进程不是PCB，进程实体是 PCB + 程序段 + 数据段
进程控制块 (Process Control Block, PCB) ：多少感觉像哈希值一样，记录了进程的信息
PCB是进程存在的唯一标志，创建了PCB，进程才算是”活的“
在linux中，它就是一个C语言的结构体：
linux PCBpid t pid; /* process identifier */ long state; /* state of the process */ unsigned int time slice /* scheduling information */ struct task_struct *parent; /* this process’s parent */ struct list_head children; /* this process’s children */ struct files_struct *files; /* list of open files */ struct mm_struct *mm; /* address space of this pro */ PCB具体记录了哪些信息这个太多了，主要是这些： PCB通常包含的内容这些信息会让每个进程自己认为自己独立使用CPU，看上去用于整个内存空间</description>
    </item>
    
    <item>
      <title>进程管理API介绍</title>
      <link>https://zvictorliu.github.io/operating_system/chapter02/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/operating_system/chapter02/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</guid>
      <description>进程管理API#1 fork()#进程创建的方式，它的特点是复制父进程
子进程和父进程一样的代码，所以这个函数从父进程进入，从父进程和子进程中都退出，就是相当于创建了一个平行宇宙
父进程返回子进程pid，它一定大于0，小于0则说明失败 子进程返回0 创建之后，父进程和子进程谁先被调用是不确定的
它复制的虚拟地址空间和父进程一致，但其实物理上是隔开的，即identical but seperate
再细节一点，它的复制是写时拷贝
当子进程刚被创建，都还未返回时，它们还是同一片物理空间
而一旦一个返回了，就会给子进程分配新的空间
PPT2 exit()#return和exit是不同的
return() 代表调用栈的返回，exit()代表一个进程的结束。 从main函数退出，会隐式的调用exit()函数，并将return的返回值传递给 exit() 从exit()退出，会先调用退出程序，刷新stdio流缓冲区，使用由status提 供的值执行_exit()系统调用 return 是关键字，exit()是库函数 3 exec()#它的功能有点不好用语言表达：初始化堆栈底部，启动新的程序
重新初始化了指令段和用户数据段，堆栈段以及CPU的PC指针 是overwrite这些区域，但是又不会去修改另外的如pid这些 这样其实是可以把父进程在fork之前的一些结果给清理掉，这个是让这个平行宇宙的开局不一样一点
相当于重启了一个main函数，但参数是和父进程当初不一样的
4 wait()#等待某个子进程，调用者会被阻塞，子进程结束，回收资源返回pid
如果没有子进程，则立刻返回-1
而waitpid() 则是通过指定pid，并且还可以设置options选择是否阻塞
5 kill()#发信号
避免僵尸进程的办法：有人收尸
可以是父进程收尸，也可以是操作系统</description>
    </item>
    
    <item>
      <title>进程通信</title>
      <link>https://zvictorliu.github.io/operating_system/chapter02/ipc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/operating_system/chapter02/ipc/</guid>
      <description>有些进程是完全独立的，自成一派，而有些则是协作进程，会受到其它进程的影响，比如：共享资源可能会被其它进程所修改
进程通信 (InterProcess Communication, IPC) 机制就是用于进程间交互的一套规则
进程通信有两种基本的形式：
共享内存，好比网盘传输 消息传递，好比文件传输助手 共享内存系统#一个共享区域应该这样产生：一个进程（生产者）创建共享内存段，这段空间被加到另一个进程（消费者）的地址空间内
有两个注意的问题：
操作系统一般会限制进程只访问自己的地址空间 即使是共享的，也不能同时写，有可能发生冲 在生产-消费关系里面，消费者可以在生产者写的同时，读取已经写过的区域 这段缓冲区可以是无界的，生产者可以一直生产放进无底洞，也可以是有界的，仓库满了生产者就必须要等消费者取走以腾出位置（假设知道读写状态）
消息传递系统#两个进程之间能够互相发送和接收消息
要认识到通信需要存在一种“电话线”，将二者连接起来，这和广播不同，进程通信的电话线叫做链路
一般来说发送消息需要指明对象，可是如果对方改电话号码了呢？要知道进程的标识符是可以被改变的
有一种间接通信方案，那就是“基站”，一般是邮箱或端口，这个和共享内存的区别在于基站并非是地址空间的一部分
基站的问题是无法限制在两个进程之间，还可以有第三个第四个，那么就要有所选择谁能收到消息
注意这两个名词的含义
同步：阻塞模式 发送时有人接收才能完成 持续等待知道有消息来 异步：非阻塞 发出去就完事，对方收没收到不管 读取一个消息，可能是有效的也可能是空 如果生产者和消费者是同步的，那么两者之间就建立了交会 rendezvous
再说这个基站，它应是一个缓存区
几种操作系统的IPC实例#POSIX系统 API Mach操作系统 Windows系统 与之类似的客户机/服务器的通信#套接字：网络 远程过程调用（RPC） 管道 </description>
    </item>
    
  </channel>
</rss>
