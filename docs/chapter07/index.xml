<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>内存管理 on Operating System</title>
    <link>https://zvictorliu.github.io/myBlog/chapter07/</link>
    <description>Recent content in 内存管理 on Operating System</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://zvictorliu.github.io/myBlog/chapter07/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基本分页存储管理</title>
      <link>https://zvictorliu.github.io/myBlog/chapter07/basic_page/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/myBlog/chapter07/basic_page/</guid>
      <description>所谓分页是指：把内存空间分为一个个很小的块（等分），进程也这样切割，然后以块为单位逐个申请空间（这样就可以不连续了）
这样只有除不尽的那部分占了整个块会有内部碎片，但本来块已经够小了，这个就更小了</description>
    </item>
    
    <item>
      <title>基本原理和要求</title>
      <link>https://zvictorliu.github.io/myBlog/chapter07/pre/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/myBlog/chapter07/pre/</guid>
      <description>1
这些内容初看还挺杂乱，不知道主线是什么，这些或许是为后面的内容做一个铺垫
程序的链接
装入方式
逻辑地址和物理地址
内存映像的具体内容
内存保护的方法
内存共享，主要讲可重入代码(纯代码) 这个概念</description>
    </item>
    
    <item>
      <title>虚拟内存</title>
      <link>https://zvictorliu.github.io/myBlog/chapter07/virtual_memory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/myBlog/chapter07/virtual_memory/</guid>
      <description>先知道一下局部性原理
虚拟存储器的思想是：
作业只先把当前需要的那部分程序和数据装入内存，当运行到没有的时，再次装入 将暂时不用的部分换出去，需要时再换进来 在逻辑上容量得到扩充（不是很理解这部分） 为实现虚拟存储器，有三种方式：
请求分页（最主要）、请求分段、请求段页 和前面的基本xxx相比，这属于”请求“，这个是特点
只学请求分页
1 请求分页管理方式#能实现调入所需页面、置换暂时不需要的页面
需要的硬件支持：
页表 缺页中断：想来真tm合理 地址变换 1.1 页表#多增加了几个字段的原因：
为实现请求，需要知道页面当前在不在内存中，同时还需要知道在外存中的位置 有点忘了基本分页为什么不需要外存地址了，，，，， 内存不够需要置换时，需要有依据决定哪些是可以换出去的，此外，如果页面没有被修改过的话就不需要再将其写一遍到外存，因此还有一个记录是否被修改的 所以，多出来了四个字段：
1.2 缺页中断#页面不在内存，就产生中断，为的是请求操作系统来把需要的页调入内存
在等待操作系统完成时，将该进程阻塞，完成后再唤醒放入就绪队列
如果没有空闲块就需要进行淘汰换出了
这种中断的特点是：
是内部异常，在指令执行期间产生和处理
类似于”找不到文件“的异常 一条指令可能有多次缺页中断
1.3 地址变换#程序请求访问一页，需要经过地址变换得到在内存中的物理地址，这个过程其实经历了许许多多if else的判断
基本分页方式都认为页就在内存当中，所以不会有请求调入和页面置换这两个步骤
会先检索快表（这个忘了）
2 页面置换算法#很简单就是如何选择哪个该换出去的算法，有四种
最佳置换OPT 先进先出FIFO 最近最久未使用LRU 时钟 2.1 OPT#2.2 FIFO#2.3 LRU#2.4 Clock#简单型和改进型
3 页面分配策略#页框是内存的”页“，这节研究给特定的进程分配多少页框，很类似于内存的划分了
太少了，虽然能放的进程多了，但每个进程缺页的概率很高（即使有局部性原理）
太多了，由于局部性原理可能根本不需要很多，缺页率不会降低太多
这部分感觉不是重点，但是也可能考，，，所以，，唉</description>
    </item>
    
    <item>
      <title>连续分配管理方式</title>
      <link>https://zvictorliu.github.io/myBlog/chapter07/continue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/myBlog/chapter07/continue/</guid>
      <description>就是给用户程序分配一段连续的空间（即一个程序的东西是放在一处的）来存，具体来说有三种方式
单一连续分配 固定分区分配 动态分区分配 单一连续分配#这个就是很基础很早期的，只能单一程序的时候，除了低地址的操作系统区，用户区全给一个程序，是一个不是多个
固定分区分配#在单一的基础上，把用户区分成几个段，每段给一个程序
然后要考虑的问题是：
怎么分？是均分还是不均分，对应的问题：引出内部碎片概念
怎么排？设置了一个叫分区说明表的记录册
动态分区分配#这里王道有说这个规划过程：刚开始一个个接着装，当放不下时，就要把前面空闲的进程给替换掉
这里有外部碎片的概念：替换掉前面之后，分区和分区之间就可能有一段空白了（这里的分区就是程序所需的大小，这段空白在分区外面所以叫外部，而前面是在固定分区内放一个不那么大的程序，是在分区内部）</description>
    </item>
    
  </channel>
</rss>
