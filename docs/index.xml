<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hello on Operating System</title>
    <link>https://zvictorliu.github.io/operating_system/</link>
    <description>Recent content in hello on Operating System</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 19 Apr 2023 21:49:43 +0800</lastBuildDate><atom:link href="https://zvictorliu.github.io/operating_system/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>几种调度算法</title>
      <link>https://zvictorliu.github.io/operating_system/chapter04/schedule_alg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/operating_system/chapter04/schedule_alg/</guid>
      <description>先到先得#时间轮转#多级反馈#</description>
    </item>
    
    <item>
      <title>操作系统的历史</title>
      <link>https://zvictorliu.github.io/operating_system/chapter01/history-of-os-development/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/operating_system/chapter01/history-of-os-development/</guid>
      <description>先欠着</description>
    </item>
    
    <item>
      <title>前置基础</title>
      <link>https://zvictorliu.github.io/operating_system/chapter01/pre/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/operating_system/chapter01/pre/</guid>
      <description>这部分与操作系统这个课本身并没有多大关系，但是又或许需要它以便于理解，先欠着</description>
    </item>
    
    <item>
      <title>并发和互斥</title>
      <link>https://zvictorliu.github.io/operating_system/chapter04/signal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/operating_system/chapter04/signal/</guid>
      <description>何为并发？
何为互斥？</description>
    </item>
    
    <item>
      <title>扫盲</title>
      <link>https://zvictorliu.github.io/operating_system/chapter01/blind/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/operating_system/chapter01/blind/</guid>
      <description>这里介绍一下常见的一些概念却很少有深入解释的
Linux和Unix#简单来说UNIX就是没有图形界面的那种，比较老
Linux是基于其设计思想的，因此经常会说”在Linux/Unix系统中&amp;quot;，就是说它们在理念上很多是相似的，只是实现方式有些不同
x86, win32, win64#POSIX#POSIX（Portable Operating System Interface，可移植操作系统接口）是一种接口标准，是IEEE指定的操作系统规范，它规定了操作系统中应该提供哪些基本功能和接口，以及如何使用这些功能和接口
相当于一种法律法规吧！
并发：同时间段 同步：依赖关系，必须有确定的先后 互斥：排斥使用临界自由 并行：同时刻 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zvictorliu.github.io/operating_system/memory_management/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/operating_system/memory_management/basic/</guid>
      <description>基本管理方式#这种分配方式是将用户需要的内存空间全部分配给用户，要多少有多少，与之对应后面有不是全部分配的管理方式
分配给用户的空间有连续和非连续的区别，分成三种：
1 连续分配#1.1 单一连续#这个就是很基础很早期的，只能单一程序的时候，除了低地址的操作系统区，用户区全给一个程序，是一个不是多个
1.2 固定分区#在单一的基础上，把用户区分成几个段，每段给一个程序
然后要考虑的问题是：
怎么分？是均分还是不均分，对应的问题：引出内部碎片概念
怎么排？设置了一个叫分区说明表的记录册
1.3 动态分区#这里王道有说这个规划过程：刚开始一个个接着装，当放不下时，就要把前面空闲的进程给替换掉
这里有外部碎片的概念：替换掉前面之后，分区和分区之间就可能有一段空白了（这里的分区就是程序所需的大小，这段空白在分区外面所以叫外部，而前面是在固定分区内放一个不那么大的程序，是在分区内部）
2 基本分页式#2.1 基本概念#将内存和进程均分块，进程中叫页、页面、Page，内存中叫页框、页帧、Page Frame
逻辑地址由页号+页内偏移量组成，一般是高位存页号，则共可以表示$2^{20}$个页，低12位为偏移地址，即一页有$2^{12}$个单元，通常是字节为单位，所以是4KB，不过这也不一定
系统为每个进程建立一张页表，上面是逻辑地址到物理地址的转换，这个页表也是整个存在内存中以查找，先找到页表再去找相应的页框中存的页
一个页表项是 页号+块号，也就是说页号是页的编号，块号是页框的编号
2.2 地址变换#前面已经说了，寻址方式就是
首先根据逻辑地址中的页号($P = A / L$)，在页表中找对应的块号，那么怎么找到页表呢？有一个专门的页表寄存器，记录了页表的起始地址以及页表长度，后者可以用来检查是否越界
起始地址with页号就足够在内存中找到页表中的那一项了，从而得到块号
块号with偏移量能够计算出物理地址：$E = b*L + W, \quad W = A % L$，这样的前提是连续的
所以有两次查找内存的过程：找页表项和找页框
为了提高速度，可以设置一个高速缓冲存储器：快表，在其中找页表项比访问内存要快得多，没找到再去在内存中找
因为页表也要存在连续的内存中，就比较占空间，于是设置多级页表，顶级页表只有一个页面，根据一级页号找到顶级页表，从中根据指引利用二级页号再找到块号
3 基本分段式#分段式可以不需要段与段之间连续
段表存的就不是 块号而是基地址
注意分页式计算块的物理地址并没有基地址
4 段页式#段号找到页表的基地址，跟二级有点类似</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zvictorliu.github.io/operating_system/process/%E5%90%8C%E6%AD%A5%E4%BA%92%E6%96%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/operating_system/process/%E5%90%8C%E6%AD%A5%E4%BA%92%E6%96%A5/</guid>
      <description>同步与互斥#信号量#P操作：阻塞式查询
V操作：释放</description>
    </item>
    
    <item>
      <title>IO管理基础</title>
      <link>https://zvictorliu.github.io/operating_system/io_management/io%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/operating_system/io_management/io%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/</guid>
      <description>IO管理基础#1 IO设备#IO设备根据信息交换的单位可分为：
块设备：以数据块为单位，比如磁盘，可寻址 字符设备：以字符串为单位，比如键盘，不可寻址 1.1 IO接口#设备控制器，即是IO接口，它既要能和CPU通信，还要和设备通信，并能按照CPU指令控制设备
有与CPU的接口，也有与设备的接口
IO逻辑能够对CPU发出的控制何地址信息译码，从而进行控制
所以，其功能包括了：
接收何识别CPU命令、数据交换、标识和报告设备状态、地址识别、数据缓冲、差错控制
1.2 IO端口#指的其实是寄存器，也就是IO接口中可以被CPU直接访问的那部分寄存器，包括：
数据寄存器：数据缓冲用 状态寄存器：记录状态，知道是否准备好 控制寄存器：命令 编址方式（很微机原理）
独立编址 统一编址（内存映射） 2 IO控制方式#设备和内存之间的输入输出控制方式
2.1 程序直接控制#即轮询方式，CPU读取外部设备的每一个字
CPU都需要不断检查外设状态，直到被放入设备管理器的寄存器中，更改了外设状态
2.2 中断驱动#数据读入后，通过控制线发起中断信号，CPU请求之后再将数据放到总线上传给CPU
比轮询好，但每个字也需要用一次CPU
2.3 DMA#在内存和设备之间建立一条之间的通路，以数据块为单位传输，直接送入内存，只有在开始和结束时才需要CPU
有专门的DMA控制器：
CR: 命令/状态寄存器
MAR: 内存地址寄存器，输出时是内存中的源地址，输入时是内存中的目标地址
DR: 数据寄存器
DC: 数据计数器
CPU接收到设备发出的DMA请求，给DMA控制器发一条命令启动后继续做自己的事，DMA自己进行传输（一个块，多个字），传输完成后再发起中断
3 IO软件层次#IO软件，分层结构
设备独立性软件屏蔽了设备的差异
4 应用程序的IO接口#字符设备接口
块设备接口
网络设备接口
阻塞/非阻塞IO</description>
    </item>
    
    <item>
      <title>临界区问题</title>
      <link>https://zvictorliu.github.io/operating_system/chapter05/syn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/operating_system/chapter05/syn/</guid>
      <description>hello</description>
    </item>
    
    <item>
      <title>前置知识</title>
      <link>https://zvictorliu.github.io/operating_system/memory_management/pre/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/operating_system/memory_management/pre/</guid>
      <description>前置基础#1 链接和装入#源程序变成可执行文件的过程：
可执行文件要被调入内存种才能执行，这个过程叫装入
链接有三种方式：
装入也有三种方式
2 地址#逻辑地址：编译后每个模块都是从0开始编址的相对地址
而链接程序将两个模块合并时就需要修改相对地址，但也只是相对一个0，还是相对地址
内存运行计算时直接使用的也还是逻辑地址
逻辑地址经过地址变换转为物理地址才能在内存种找到相应的位置，这叫地址重定位
具体来说是有一种页表，它记录了对应关系，由操作系统维护，处理器使用它
3 内存映像#程序调入内存并运行，形成了进程在的内存种的实体，这个叫内存映像，实体=映像
具体来说分成几段：
代码段、数据段 PCB，没错之前说的PCB就是保存在内存中 堆：存放动态分配的变量 栈：用以实现函数调用，从高向低增长 比如第一个进程如果完整放入内存应该是这样子：
内存映像4 内存保护、共享#就是避免越界访问，需要一个检查装置
&amp;hellip;</description>
    </item>
    
    <item>
      <title>文件</title>
      <link>https://zvictorliu.github.io/operating_system/file_management/%E6%96%87%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/operating_system/file_management/%E6%96%87%E4%BB%B6/</guid>
      <description>文件#要明确文件不只是数据项（虽然其它信息本质也是数据）
文件除了数据，还会记录与文件相关的信息，叫做文件元数据，其实就是文件属性的意思
包括名称、类型、位置、大小、创建时间等信息
1 文件控制块FCB#一个FCB是一种数据结构，保存了用于控制文件所需的各种信息，它是用来管理的，不是文件本身（图里面的文件数据块不知道是啥）
按照一定顺序，各个FCB放在文件目录中，一个FCB和一个文件名对应，构成一条目录项
但是FCB太大，文件目录就不会放在内存中而是磁盘中
查找文件的基本流程是：将磁盘分多个盘块，存放文件目录的每个盘块有多个FCB，查找时把第一个盘块中的目录调入内存和文件名比较，没找到就换下一个盘块
如果盘块中目录项太少就会访问磁盘很多次，所以不好把整个FCB都存入盘块中
由于查找文件时只需要文件名比对，所以将文件的描述信息剥离开，形成一个索引节点
每个目录项只包含文件名和指向索引节点的指针，这样一个目录项就会小很多，一个盘块也能容纳更多目录项
存放在磁盘上的索引节点 当文件被打开时将它复制到内存中并增加一些信息，成为内存索引节点（这里的命名是根据存放的位置）
2 文件打开与关闭#基本操作包括：
创建 写 读 重新定位 删除 截断 文件需要显示地被打开，显示调用之后放入内存，之后就找的快
调用open，先根据提供的文件路径找到目录文件 在目录文件中找到和文件名一致的目录项 检查操作权限是否具备 将该目录项（索引）复制到内存中一个记录当前已打开文件的表中（因为往往不只打开一个文件） 之后，再次对文件发出操作请求时，可在内存中的表内找到文件信息
具体来说，应该是两个表，一个是每个进程的打开表，一个是记录所有进程的打开表（系统表）
如果一个进程打开前面一个进程已经打开的文件，就只需要把指针指向这个系统表
而关闭，则通过一个记录文件关联的进程个数的计数器，计数值为0则代表均已声明了关闭，于是操作系统才算真正关闭它
打开文件表的索引不一定是文件名，不同操作系统有不同的设置
打开表应该在索引节点基础之上包含：
文件指针：这个并不是指向文件物理位置的指针，而是记录上次读写的位置 文件打开计数 文件磁盘位置 访问权限 这些都是和进程关系起来的
3 文件保护#谈一谈那个权限的信息了
其实也不光是防着越权，还有记录访问方式的，这个在编程时很有体会，r w wb 这些就是表示是给什么操作，说好是只读的不能写（这个只读不是文件本身锁死了只读，是进程申请打开时就说的只读，如果后面写的话就是违规的）
口令保护 加密保护：真的是对文件进行了加密，通过密码解密 访问控制 4 文件物理结构#别忘了磁盘也是分块的
连续分配：每个文件占连续的块
链接分配：指针连接走到底便是完整的文件
隐式链接 显示链接 索引分配
FAT占内存，所以将该文件所对应盘块编号放在一起，目录查找到它就行了
混合索引分配
5 文件逻辑结构#呈现给用户的结构</description>
    </item>
    
    <item>
      <title>文件系统</title>
      <link>https://zvictorliu.github.io/operating_system/file_management/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/operating_system/file_management/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</guid>
      <description>文件系统#应用程序通过文件系统和磁盘交互
具有层次结构：
说来就是操作系统了？
1 文件系统布局#1.1 在磁盘上#文件系统存在磁盘上，磁盘分区，每个分区有一个独立的文件系统
MBR: 主引导记录，引导计算机，BIOS读入MBR并执行，确定活动分区，即引导块
引导块：执行引导块的程序，启动操作系统，在此之后布局就不一定一样了，和文件系统有关系
超级块：包含了文件系统的信息，启动时或者首次使用文件系统时调入内存
空闲块信息
1.2 在内存中#保存信息数据在安装文件系统时被加载，在文件系统操作期间被更新，在卸载时被丢弃
安装表：已安装文件系统分区的信息 目录结构缓存 系统打开文件表 进程打开文件表 2 外存空闲空间管理#磁盘中包含文件系统的分区叫做卷(volume)
一个磁盘可以有多个卷，也可以一个磁盘本身就是一个卷，甚至多个磁盘构成一个卷
文件存储设备也是分块的，管理起来也就是对空闲块的管理：组织、分配、回收
空闲表法
空闲链表法
位示图法
成组链接法
3 虚拟文件系统#统一接口，统一调用VFS提供的函数操作不同的文件系统和存储介质
面向对象设计
4 分区和安装#</description>
    </item>
    
    <item>
      <title>死锁</title>
      <link>https://zvictorliu.github.io/operating_system/process/%E6%AD%BB%E9%94%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/operating_system/process/%E6%AD%BB%E9%94%81/</guid>
      <description>死锁#多个进程竞争资源造成了一种僵局，使得互相等待，陷入死循环
死锁的必要条件
互斥条件：某一资源只能互斥访问 不剥夺条件（非抢占）：只能主动释放 请求并保持条件：进程已经占了一个资源，并请求另一个被占的资源，此时进程被阻塞但是并没有释放资源 循环等待条件：循环等待链关系，占用的资源总被环上下一个所请求，并且只能是自己释放才能满足它，如果还有别的进程释放了、又或者不只一台设备，也不会构成死锁 ​	所以，对死锁的策略：
预防：限制其出现必要条件中的几个 避免（其实也是一种预防了） 检测并解除 1 预防#破坏四个必要条件之一
互斥：不太可行，因为有些资源是无法共享的，只能互斥 非抢占：实现起来比较麻烦 请求并保持：一次申请完并占用，之后不再请求，比较浪费 循环等待：按顺序分配 2 避免#并不是事先预防，是动态检测资源分配的状态
2.1 安全检查#允许进程随时申请，但是系统在分配之前会先进行计算安全性，不安全就先让进程等待
需要找到一种安全序列
例题注意不安全不代表一定会死锁，只是有可能死锁
2.2 银行家算法#决定要不要分配的算法 可利用资源向量记录第i类资源的可用数目最大需求矩阵每个进程对每类资源的最大需求分配矩阵实际已经分配的情况需求矩阵Max - Allocation，表示接下来最多还要多少具体算法是：
定义请求向量，即某个进程此时对各类资源的申请数量
检查此次申请是否超过了之前声明的最大需求数 检查此时系统剩余的可用资源是否还能满足这次请求 试探着分配，更改各数据结构 用安全性算法检查此次分配是否会导致系统进入不安全状态 能通过检查就分配，否则让其等待
而安全性算法：
前面说了是试探性分配，用修改后的数据来，令work = available
检查当前的剩余可用资源是否能满足某个进程的最大需求，如果可以，就把该进程加入安全序列， 并把该进程持有的资源全部回收（修改work） 不断重复上述过程，看最终是否能让所有进程都加入安全序列 3 检测和解除#如果不预防和避免，那就应该能够检测到并解除
维护一张资源分配图：
然后进行简化：见王道P145
当不可完全简化时，就是死锁了，这叫死锁定理
解除的方法：
剥夺抢占 撤销进程 进程回退 </description>
    </item>
    
    <item>
      <title>目录</title>
      <link>https://zvictorliu.github.io/operating_system/file_management/%E7%9B%AE%E5%BD%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/operating_system/file_management/%E7%9B%AE%E5%BD%95/</guid>
      <description>目录#FCB的有序集合为文件目录，一个FCB就是一个文件目录项
（说是这么说，之前好像说不是整个FCB 🤔 索引节点是一种FCB改进
目录提供 文件名和文件的映射，按名存取
目录的检索速度影响性能 多用户系统应该允许重名，单用户则不能 有四种结构，一般是树形结构
1 目录结构#1.1 单级目录结构#一张目录表，一个文件占一个目录项
查找：根据文件名找到对应的FCB，检查合法后进行操作
创建：先检索所有目录以确保没有重名，然后再添加一项
删除：先找到目录项，回收文件的存储空间，然后再删除FCB
1.2 两级目录结构#分成主文件目录和用户文件目录
这样就可以不同用户重名
为何说提高效率，且用户不能对文件分类？
1.3 树形目录结构#这个是我们熟悉的结构
绝对目录和相对目录
原来分类是这个意思
缺点是：查找文件需要逐级访问中间节点，增加了磁盘访问次数
大多数操作系统都是树形结构目录
1.4 无环图目录结构#为便于实现文件共享
增加了有向边指向共享的节点（可以是文件，也可以是目录，而且两边还可以不同名）
并设置了一个共享计数器，为0时才算真正删除，否则只是删除一个用户的链接关系
2 文件共享#共享不同于拷贝，现代有两种常用共享办法
2.1 硬链接#就是1.4的思想，具体来说是通过索引结点实现的，计数器保存至文件的索引节点当中
计数器更新：
这里面其实是有：A共享给B，所以owner还是A
2.2 软链接#给B创建一个LINK类型的文件，B访问共享文件找到LINK，操作系统将其转到共享文件，这样只有A的指针指向了索引节点，这种叫做符号链接
这样A删除文件，B的LINK就找不到会被操作系统删除而不产生影响
硬链接查找速度比软链接块</description>
    </item>
    
    <item>
      <title>磁盘和固态硬盘</title>
      <link>https://zvictorliu.github.io/operating_system/io_management/%E7%A3%81%E7%9B%98%E5%92%8C%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/operating_system/io_management/%E7%A3%81%E7%9B%98%E5%92%8C%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98/</guid>
      <description>磁盘和固态硬盘#磁盘，磁盘管理方式，调度算法
固态硬盘简介</description>
    </item>
    
    <item>
      <title>线程</title>
      <link>https://zvictorliu.github.io/operating_system/process/thread/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/operating_system/process/thread/</guid>
      <description>线程#1 概念#线程是进程内部中的”进程“，是平行宇宙下的各个国家，它们共享该平行宇宙的资源，做各自的工作
切换起来开销少
线程不拥有系统资源，它与该进程内的其它线程共享整个进程的资源
每个线程还是有自己独立的堆栈和寄存器，否则就会彼此产生很大干扰
对于进程打开的文件、地址空间是共享的
所以，线程中创建的变量？ 变量是放在堆栈空间的，作用域还是只有该线程
2 线程实现模型#什么叫线程实现呢？大概就是线程表的位置吧，是谁在负责管理线程
如果线程表放在进程内，那么对于内核来说它只是在执行进程，意识不到线程，CPU调度还是以进程为单位
而如果放在内核内，内核负责管理，那它就能感知到了
3 多线程模型#这又是什么意思？指的是用户级线程和内核级线程的对应关系
用户线程需要被映射到内核线程，因为是内核将线程安排到CPU上执行，为此它必须知道它所安排的线程。对于一个简单的进程来说，内核只知道这个进程的存在，而不知道在这个进程中创建的用户线程，所以内核只会把这个进程的线程安排到CPU上，所有在这个进程中的其他用户线程如果要被执行，就必须一个一个地映射到指定给创建进程的内核线程
作者：小墙程序员 链接：https://juejin.cn/post/7167914276575789087 来源：稀土掘金 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
说明，内核线程也不只是控制表在内核中，而是内核中真的有线程，它这个线程和用户级的线程是对应的
多对一：用户级一个阻塞，整个进程就阻塞</description>
    </item>
    
    <item>
      <title>线程库Pthreads</title>
      <link>https://zvictorliu.github.io/operating_system/chapter06/pthreads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/operating_system/chapter06/pthreads/</guid>
      <description>本节主要介绍 Pthreads
首先 pthreads 虽说是API库，但是只是一种规范，实现方式仍然取决于操作系统的设计方式
但是我们在使用时，当成一般的库也没啥问题
主要需要学会几个接口的使用就行
数据类型：pthread_t，pthread_attr_t
phread_join()函数</description>
    </item>
    
    <item>
      <title>虚拟内存</title>
      <link>https://zvictorliu.github.io/operating_system/memory_management/virtual_memory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/operating_system/memory_management/virtual_memory/</guid>
      <description>先知道一下局部性原理
虚拟存储器的思想是：
作业只先把当前需要的那部分程序和数据装入内存，当运行到没有的时，再次装入 将暂时不用的部分换出去，需要时再换进来 内存能装入的进程变多，逻辑上空间变大 为实现虚拟存储器，有三种方式：
请求分页（最主要）、请求分段、请求段页 和前面的基本xxx相比，这属于”请求“，这个是特点
只学请求分页
1 请求分页管理方式#能实现调入所需页面、置换暂时不需要的页面
需要的硬件支持：
页表 缺页中断：想来真tm合理 地址变换 1.1 页表#多增加了几个字段的原因：
为实现请求，需要知道页面当前在不在内存中，同时还需要知道在外存中的位置 有点忘了基本分页为什么不需要外存地址了，，，，， 内存不够需要置换时，需要有依据决定哪些是可以换出去的，此外，如果页面没有被修改过的话就不需要再将其写一遍到外存，因此还有一个记录是否被修改的 所以，多出来了四个字段：
1.2 缺页中断#页面不在内存，就产生中断，为的是请求操作系统来把需要的页调入内存
在等待操作系统完成时，将该进程阻塞，完成后再唤醒放入就绪队列
如果没有空闲块就需要进行淘汰换出了
这种中断的特点是：
是内部异常，在指令执行期间产生和处理
类似于”找不到文件“的异常 一条指令可能有多次缺页中断
1.3 地址变换#程序请求访问一页，需要经过地址变换得到在内存中的物理地址，这个过程其实经历了许许多多if else的判断
基本分页方式都认为页就在内存当中，所以不会有请求调入和页面置换这两个步骤
会先检索快表（这个忘了）
2 页面置换算法#很简单就是如何选择哪个该换出去的算法，有四种
最佳置换OPT 先进先出FIFO 最近最久未使用LRU 时钟 2.1 OPT#2.2 FIFO#2.3 LRU#2.4 Clock#简单型和改进型
3 页面分配策略#页框是内存的”页“，这节研究给特定的进程分配多少页框，很类似于内存的划分了
太少了，虽然能放的进程多了，但每个进程缺页的概率很高（即使有局部性原理）
太多了，由于局部性原理可能根本不需要很多，缺页率不会降低太多
这部分感觉不是重点，但是也可能考，，，所以，，唉</description>
    </item>
    
    <item>
      <title>设备独立性软件</title>
      <link>https://zvictorliu.github.io/operating_system/io_management/%E8%AE%BE%E5%A4%87%E7%8B%AC%E7%AB%8B%E6%80%A7%E8%BD%AF%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/operating_system/io_management/%E8%AE%BE%E5%A4%87%E7%8B%AC%E7%AB%8B%E6%80%A7%E8%BD%AF%E4%BB%B6/</guid>
      <description>设备独立性软件#执行所有设备公有操作的软件
1 高速缓存与缓冲区#高速缓存逻辑上属于磁盘，其实物理上是在内存中的盘块
缓冲区可以很好接近速度不匹配的问题，减少对CPU中断频率，也能接近基本数据单元大小不一致的问题
单缓冲 双缓冲 循环缓冲 缓冲池 2 设备分配与回收#怎么把设备分给不同进程
独占 分时共享 虚拟设备 有专门的数据结构
3 SPOOLing技术#用户进程请求打印输出，但这时打印机被占用
假脱机管理进程会在磁盘缓冲区为该进程分配一个空闲盘块，将要输出的数据放入其中
并申请一张用户请求打印表，记录打印要求，放入队列
这样用户进程不会阻塞，打印机空闲后会打印
这样每个进程都会觉得自己是独占了这个设备（只是有延时）
4 设备驱动程序接口#</description>
    </item>
    
    <item>
      <title>进程概念</title>
      <link>https://zvictorliu.github.io/operating_system/process/process_concept/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/operating_system/process/process_concept/</guid>
      <description>进程概念#1.1 进程的状态#进程具有多种运行状态
最基本的：
运行态：正在处理机上运行，是真正的运行，进程本身就是动态的也可以理解为”运行“，此处可以理解为CPU正在处理 就绪态：即将送入处理机运行，其它都已准备好，多个进程会排成就绪队列 阻塞态：进程等待某一事件（不包括等待处理机，那是就绪态） 另外还有细分的两种状态：
创建态：进程正在被创建，这个过程是多个步骤的显得比较漫长，所以有这个状态，即准备中 结束态：正在从系统中消失 1.2 进程的表示#一定要注意 进程不是PCB，进程实体是 PCB + 程序段 + 数据段
进程控制块 (Process Control Block, PCB) ：多少感觉像哈希值一样，记录了进程的信息
PCB是进程存在的唯一标志，创建了PCB，进程才算是”活的“
在linux中，它就是一个C语言的结构体：
linux PCBpid t pid; /* process identifier */ long state; /* state of the process */ unsigned int time slice /* scheduling information */ struct task_struct *parent; /* this process’s parent */ struct list_head children; /* this process’s children */ struct files_struct *files; /* list of open files */ struct mm_struct *mm; /* address space of this pro */ PCB具体记录了哪些信息这个太多了，主要是这些： PCB通常包含的内容这些信息会让每个进程自己认为自己独立使用CPU，看上去用于整个内存空间</description>
    </item>
    
    <item>
      <title>进程管理API介绍</title>
      <link>https://zvictorliu.github.io/operating_system/process/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/operating_system/process/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</guid>
      <description>进程管理API#1 fork()#进程创建的方式，它的特点是复制父进程
子进程和父进程一样的代码，所以这个函数从父进程进入，从父进程和子进程中都退出，就是相当于创建了一个平行宇宙
父进程返回子进程pid，它一定大于0，小于0则说明失败 子进程返回0 创建之后，父进程和子进程谁先被调用是不确定的
它复制的虚拟地址空间和父进程一致，但其实物理上是隔开的，即identical but seperate
再细节一点，它的复制是写时拷贝
当子进程刚被创建，都还未返回时，它们还是同一片物理空间
而一旦一个返回了，就会给子进程分配新的空间
PPT2 exit()#return和exit是不同的
return() 代表调用栈的返回，exit()代表一个进程的结束。 从main函数退出，会隐式的调用exit()函数，并将return的返回值传递给 exit() 从exit()退出，会先调用退出程序，刷新stdio流缓冲区，使用由status提 供的值执行_exit()系统调用 return 是关键字，exit()是库函数 3 exec()#它的功能有点不好用语言表达：初始化堆栈底部，启动新的程序
重新初始化了指令段和用户数据段，堆栈段以及CPU的PC指针 是overwrite这些区域，但是又不会去修改另外的如pid这些 这样其实是可以把父进程在fork之前的一些结果给清理掉，这个是让这个平行宇宙的开局不一样一点
相当于重启了一个main函数，但参数是和父进程当初不一样的
4 wait()#等待某个子进程，调用者会被阻塞，子进程结束，回收资源返回pid
如果没有子进程，则立刻返回-1
而waitpid() 则是通过指定pid，并且还可以设置options选择是否阻塞
5 kill()#发信号
避免僵尸进程的办法：有人收尸
可以是父进程收尸，也可以是操作系统</description>
    </item>
    
    <item>
      <title>进程调度</title>
      <link>https://zvictorliu.github.io/operating_system/process/schedule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/operating_system/process/schedule/</guid>
      <description>进程调度#1 概念#平均等待时间
平均周转时间
饥饿现象
2 典型调度算法#2.1 FCFS#2.2 SJF 短作业优先#2.3 优先级调度#2.4 RR 时间轮转#上下文切换：一个进程执行完从而换到另一个不叫上下文切换，因为已经不需要保存现场了
2.5 多级反馈队列#</description>
    </item>
    
    <item>
      <title>进程通信</title>
      <link>https://zvictorliu.github.io/operating_system/process/ipc-csapp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/operating_system/process/ipc-csapp/</guid>
      <description>进程通信#有些进程是完全独立的，自成一派，而有些则是协作进程，会受到其它进程的影响，比如：共享资源可能会被其它进程所修改
进程通信 (InterProcess Communication, IPC) 机制就是用于进程间交互的一套规则
进程通信有两种基本的形式：
共享内存，好比网盘传输 消息传递，好比文件传输助手 共享内存系统#一个共享区域应该这样产生：一个进程（生产者）创建共享内存段，这段空间被加到另一个进程（消费者）的地址空间内
有两个注意的问题：
操作系统一般会限制进程只访问自己的地址空间 即使是共享的，也不能同时写，有可能发生冲 在生产-消费关系里面，消费者可以在生产者写的同时，读取已经写过的区域 这段缓冲区可以是无界的，生产者可以一直生产放进无底洞，也可以是有界的，仓库满了生产者就必须要等消费者取走以腾出位置（假设知道读写状态）
消息传递系统#两个进程之间能够互相发送和接收消息
要认识到通信需要存在一种“电话线”，将二者连接起来，这和广播不同，进程通信的电话线叫做链路
一般来说发送消息需要指明对象，可是如果对方改电话号码了呢？要知道进程的标识符是可以被改变的
有一种间接通信方案，那就是“基站”，一般是邮箱或端口，这个和共享内存的区别在于基站并非是地址空间的一部分
基站的问题是无法限制在两个进程之间，还可以有第三个第四个，那么就要有所选择谁能收到消息
注意这两个名词的含义
同步：阻塞模式 发送时有人接收才能完成 持续等待知道有消息来 异步：非阻塞 发出去就完事，对方收没收到不管 读取一个消息，可能是有效的也可能是空 如果生产者和消费者是同步的，那么两者之间就建立了交会 rendezvous
再说这个基站，它应是一个缓存区
几种操作系统的IPC实例#POSIX系统 API Mach操作系统 Windows系统 与之类似的客户机/服务器的通信#套接字：网络 远程过程调用（RPC） 管道 </description>
    </item>
    
    <item>
      <title>进程通信</title>
      <link>https://zvictorliu.github.io/operating_system/process/ipc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/operating_system/process/ipc/</guid>
      <description>进程通信#进程之间需要通信：通知信息，数据传输，共享等待
进程通信 (InterProcess Communication, IPC) 机制就是用于进程间交互的一套规则
进程通信三种基本形式
共享内存，好比网盘传输 消息传递，好比文件传输助手 管道 1 共享内存#两个通信的进程之间存在一个可以直接进行访问的共享空间
linux共享内存函数#include &amp;lt;sys/shm.h&amp;gt; // 创建或获取一个共享内存：成功返回共享内存ID，失败返回-1 int shmget(key_t key, size_t size, int flag); // 连接共享内存到当前进程的地址空间：成功返回指向共享内存的指针，失败返回-1 void *shmat(int shm_id, const void *addr, int flag); // 断开与共享内存的连接：成功返回0，失败返回-1 int shmdt(void *addr); // 控制共享内存的相关信息：成功返回0，失败返回-1 int shmctl(int shm_id, int cmd, struct shmid_ds *buf); 编程示例虽然是共享，但对其读写也应是同步互斥的，需要同步互斥工具
需要特殊的系统调用才能让两个进程共享一片内存空间
2 消息传递#操作系统提供了发送和接收消息的两个原语，数据交换以格式化的Message为单位
形象的例子：A要向B通信，需要把信息装在信封里寄给B
此时有：
直接：邮差直接给B，挂在B的一个消息缓冲队列里，B依次读取 间接：邮差放到B门口的邮箱里，B从里面拿 听起来感觉还是有点中间商
3 管道通信#管道是连接一个读进程和一个写进程的一个共享文件，即pipe文件</description>
    </item>
    
  </channel>
</rss>
